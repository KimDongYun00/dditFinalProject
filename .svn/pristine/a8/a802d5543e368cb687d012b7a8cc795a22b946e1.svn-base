package kr.or.ddit.controller.admin;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import kr.or.ddit.service.admin.inter.IAdminScholarshipService;
import kr.or.ddit.vo.ScholarshipVO;
import lombok.extern.slf4j.Slf4j;

// 관리자 - 장학금관리
@Controller
@Slf4j
@RequestMapping("/admin")
public class AdminScholarshipController {

    @Inject
    private IAdminScholarshipService scholarshipService;

    // 장학금 신청 목록 조회
    @RequestMapping(value = "/scholarshipRequestList", method = RequestMethod.GET)
    public String scholarshipRequestList(Model model,
                                         @RequestParam(required = false) String type,
                                         @RequestParam(required = false) String searchName,
                                         @RequestParam(required = false) String searchStuNo) {
        log.info("scholarshipRequestList()...! 장학금 신청 리스트 출력입니다.");

        List<ScholarshipVO> scholarshipRequestList = scholarshipService.getScholarshipRequestList();

        // 필터링 로직 추가
        if (type != null && !type.equals("전체")) {
            scholarshipRequestList = scholarshipRequestList.stream()
                    .filter(s -> {
                        switch (type) {
                            case "승인":
                                return "C0201".equals(s.getComDetCNo());
                            case "미승인":
                                return "C0202".equals(s.getComDetCNo());
                            case "반려":
                                return "C0203".equals(s.getComDetCNo());
                            default:
                                return true;
                        }
                    })
                    .collect(Collectors.toList());
        }
        if (searchName != null && !searchName.isEmpty()) {
            scholarshipRequestList = scholarshipRequestList.stream()
                    .filter(s -> s.getSchName().toLowerCase().contains(searchName.toLowerCase()))
                    .collect(Collectors.toList());
        }
        if (searchStuNo != null && !searchStuNo.isEmpty()) {
            scholarshipRequestList = scholarshipRequestList.stream()
                    .filter(s -> s.getStuNo().toLowerCase().contains(searchStuNo.toLowerCase()))
                    .collect(Collectors.toList());
        }

        model.addAttribute("scholarshipRequestList", scholarshipRequestList);
        model.addAttribute("selectedType", type);
        model.addAttribute("searchName", searchName);
        model.addAttribute("searchStuNo", searchStuNo);

        return "admin/scholarship/scholarshipRequestMain";
    }

    // 장학 신청 세부 조회
    @RequestMapping(value = "/scholarshipRequestDetail", method = RequestMethod.GET)
    public String scholarshipRequestDetail(Model model, @RequestParam String schRecNo) {
        log.info("scholarshipRequestDetail()...! 특정 신청 상세보기 버튼 클릭시 상세보기 입니다.");

        List<ScholarshipVO> scholarshipVO = scholarshipService.getScholarshipRequestDetail(schRecNo);

        log.info("####################################");
        log.info("@@@@@@@@@@@requestNo : " + schRecNo);
        log.info("scholarshipVO" + scholarshipVO);

        model.addAttribute("scholarshipVO", scholarshipVO);

        return "admin/scholarship/scholarshipRequestDetail";
    }

    // 장학 신청 개별 승인 처리
    @RequestMapping(value = "/scholarshipRequestApprove", method = RequestMethod.POST)
    public String scholarshipRequestApprove(@RequestParam String schRecNo, Model model) {
        log.info("scholarshipRequestApprove()..! 상세 페이지 내에서 장학 신청 승인 처리 입니다.");

        boolean isApproved = scholarshipService.scholarshipRequestApprove(schRecNo);

        if (isApproved) {
            model.addAttribute("message", "success");
        } else {
            model.addAttribute("message", "error");
        }

        return "redirect:/admin/scholarshipRequestDetail?schRecNo=" + schRecNo;
    }

    // 장학 신청 개별 반려 처리
    @RequestMapping(value = "/scholarshipRequestWait", method = RequestMethod.POST)
    public String scholarshipRequestWait(@RequestParam String schRecNo, @RequestParam String rejContent, Model model) {
        log.info("scholarshipRequestWait()..! 상세 페이지 내에서 장학 신청 반려 처리 입니다.");

        boolean isApproved = scholarshipService.scholarshipRequestWait(schRecNo, rejContent);

        if (isApproved) {
            model.addAttribute("message", "success");
        } else {
            model.addAttribute("message", "error");
        }

        return "redirect:/admin/scholarshipRequestDetail?schRecNo=" + schRecNo;
    }
}
