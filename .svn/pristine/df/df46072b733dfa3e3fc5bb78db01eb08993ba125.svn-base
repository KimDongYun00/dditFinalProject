package kr.or.ddit.service.admin.impl;

import java.io.File;
import java.util.List;
import java.util.UUID;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.mapper.IAdminMemberMapper;
import kr.or.ddit.security.CustomNoOpPasswordEncoder;
import kr.or.ddit.service.admin.inter.IAdminMemberService;
import kr.or.ddit.vo.CommonVO;
import kr.or.ddit.vo.EmployeeVO;
import kr.or.ddit.vo.PaginationInfoVO;
import kr.or.ddit.vo.ProfessorVO;
import kr.or.ddit.vo.StudentVO;
import kr.or.ddit.vo.UserVO;

@Service
public class AdminMemberServiceImpl implements IAdminMemberService {
	
	// 패스워드 인코더
	@Inject
	private PasswordEncoder pw;
	
	@Inject
	private IAdminMemberMapper memMapper;
	
	@Override
	public List<ProfessorVO> searchProfessor(String proName) {
		return memMapper.searchProfessor(proName);
	}



	@Override
	public StudentVO stuDetail(String stuNo) {
		
		return memMapper.stuDetail(stuNo);
	}

	@Override
	public List<CommonVO> stuMList(String comNo) {
		
		return memMapper.stuMList(comNo);
	}

	@Override
	public int stuUpdate(StudentVO stuVO, HttpServletRequest req) {
		String uploadPath = "";
		uploadPath = req.getServletContext().getRealPath("/resources/stuImg");
		
		File file = new File(uploadPath);
		
		if(!file.exists()) {
			file.mkdirs();
		}
		
		String stuImg = ""; // 시설이미지 경로
		
		try {
			MultipartFile stuImgFile = stuVO.getImgFile();
			
			if(stuImgFile.getOriginalFilename() != null && !stuImgFile.getOriginalFilename().equals("")) {
				String fileName = UUID.randomUUID().toString(); // UUID 파일명 만들기
				fileName += "_" + stuImgFile.getOriginalFilename();
				
				uploadPath += "/" + fileName;
				
				stuImgFile.transferTo(new File(uploadPath));
				
				stuImg = "/resources/stuImg/" + fileName;
			}
			
			stuVO.setStuImg(stuImg);
			
		} catch (Exception e) {
			e.printStackTrace();
		}	
		
		return memMapper.stuUpdate(stuVO);
	}

	
	// 학생 페이징처리 위한 카운터
	@Override
	public int stuCount(PaginationInfoVO<StudentVO> pagingVO) {
		
		return memMapper.stuCount(pagingVO);
	}

	// 학생 페이징 처리를 위한 리스트
	@Override
	public List<StudentVO> stuList(PaginationInfoVO<StudentVO> pagingVO) {
		
		return memMapper.stuList(pagingVO);
	}


	// 교수 페이징 처리를 위한 카운터
	@Override
	public int proCount(PaginationInfoVO<ProfessorVO> pagingVO) {
		// TODO Auto-generated method stub
		return memMapper.proCount(pagingVO);
	}


	// 교수 페이징 처리를 위한 리스트
	@Override
	public List<ProfessorVO> proList(PaginationInfoVO<ProfessorVO> pagingVO) {
		// TODO Auto-generated method stub
		return memMapper.proList(pagingVO);
	}


	// 교수 상세보기 데이터
	@Override
	public ProfessorVO proDetail(String proNo) {
		// TODO Auto-generated method stub
		return memMapper.proDetail(proNo);
	}



	@Override
	public int proUpdate(ProfessorVO proVO, HttpServletRequest req) {
		String uploadPath = "";
		uploadPath = req.getServletContext().getRealPath("/resources/proImg");
		
		File file = new File(uploadPath);
		
		if(!file.exists()) {
			file.mkdirs();
		}
		
		String proImg = ""; // 시설이미지 경로
		
		try {
			MultipartFile proImgFile = proVO.getProFile();
			
			if(proImgFile.getOriginalFilename() != null && !proImgFile.getOriginalFilename().equals("")) {
				String fileName = UUID.randomUUID().toString(); // UUID 파일명 만들기
				fileName += "_" + proImgFile.getOriginalFilename();
				
				uploadPath += "/" + fileName;
				
				proImgFile.transferTo(new File(uploadPath));
				
				proImg = "/resources/proImg/" + fileName;
			}
			
			proVO.setProImg(proImg);
			
		} catch (Exception e) {
			e.printStackTrace();
		}	
		
		return memMapper.proUpdate(proVO);
	}



	@Override
	public int proIdCheck(String proID) {
		// TODO Auto-generated method stub
		return memMapper.proIdCheck(proID);
	}



	@Override
	public int proDelete(String proNo) {
		// TODO Auto-generated method stub
		return memMapper.proDelete(proNo);
	}



	@Override
	public int stuDelete(String stuNo) {
		// TODO Auto-generated method stub
		return memMapper.stuDelete(stuNo);
	}



	@Override
	public int empCount(PaginationInfoVO<EmployeeVO> pagingVO) {
		return memMapper.empCount(pagingVO);
	}



	@Override
	public List<EmployeeVO> empList(PaginationInfoVO<EmployeeVO> pagingVO) {
		return memMapper.empList(pagingVO);
	}



	@Override
	public EmployeeVO empDetail(String empNo) {
		return memMapper.empDetail(empNo);
	}



	@Override
	public int empUpdate(EmployeeVO empVO, HttpServletRequest req) {
		String uploadPath = "";
		uploadPath = req.getServletContext().getRealPath("/resources/empImg");
		
		File file = new File(uploadPath);
		
		if(!file.exists()) {
			file.mkdirs();
		}
		
		String empImg = ""; // 시설이미지 경로
		
		try {
			MultipartFile empImgFile = empVO.getEmpFile();
			
			if(empImgFile.getOriginalFilename() != null && !empImgFile.getOriginalFilename().equals("")) {
				String fileName = UUID.randomUUID().toString(); // UUID 파일명 만들기
				fileName += "_" + empImgFile.getOriginalFilename();
				
				uploadPath += "/" + fileName;
				
				empImgFile.transferTo(new File(uploadPath));
				
				empImg = "/resources/empImg/" + fileName;
			}
			
			empVO.setEmpImg(empImg);
			
		} catch (Exception e) {
			e.printStackTrace();
		}	
		
		return memMapper.empUpdate(empVO);
	}



	@Override
	public int empDelete(String empNo) {
		// TODO Auto-generated method stub
		return memMapper.empDelete(empNo);
	}



	@Override
	public int stuInsert(StudentVO stuVO) {
		stuVO.setEnabled("1");			// enabled? 
		stuVO.setStuDelYn("N");			// 삭제여부
		stuVO.setComDetMNo("M0101");	// 재적상태
		stuVO.setStuYear(1);			// 학년 입학해서 1학년		
		
		return memMapper.stuInsert(stuVO);
	}



	// 학생 회원가입 전에 유저를 먼저 가입해야함
	@Override
	public String memInsert() {		
		//유저 가입시에 아이디(시퀀스), 권한 등을 가입해야함
		// 유저VO 객체를 만들어서 비밀번호를 변경해서 넣어준다 기본('1234') 
		UserVO user = new UserVO();
		
		user.setUserPw(pw.encode("1234"));
		user.setComDetUNo("U0101");
		
		int cnt = memMapper.memInsert(user);
		
		if(cnt > 0 ) {
			memMapper.memAuthInsert(user.getUserNo());
		} 
		
		return user.getUserNo();
	}


	

	

	

	

}













