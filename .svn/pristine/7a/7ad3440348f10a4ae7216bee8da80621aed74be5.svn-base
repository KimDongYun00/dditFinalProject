package kr.or.ddit.assignment.service;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.UUID;

import javax.annotation.Resource;
import javax.inject.Inject;

import org.springframework.stereotype.Service;

import kr.or.ddit.mapper.IAssignmentMapper;
import kr.or.ddit.mapper.IFileMapper;
import kr.or.ddit.mapper.ILectureDataMapper;
import kr.or.ddit.mapper.IProfessorMapper;
import kr.or.ddit.vo.AssignmentSubmitVO;
import kr.or.ddit.vo.AssignmentVO;
import kr.or.ddit.vo.FileVO;
import kr.or.ddit.vo.PaginationInfoVO;

@Service
public class AssignmentServiceImpl implements IAssignmentService {

	@Resource(name="uploadFolder")
	private String uploadPath;
	
	@Inject
	private IFileMapper fileMapper;
	
	@Inject
	private IAssignmentMapper mapper;
	
	@Override
	public int selectAssignmentCount(PaginationInfoVO<AssignmentVO> pagingVO) {
		// TODO Auto-generated method stub
		return mapper.selectAssignmentCount(pagingVO);
	}

	@Override
	public List<AssignmentVO> selectAssignmentList(PaginationInfoVO<AssignmentVO> pagingVO) {
		// TODO Auto-generated method stub
		return mapper.selectAssignmentList(pagingVO);
	}

	@Override
	public AssignmentVO selectAssignmentDetail(String assNo) {
		// TODO Auto-generated method stub
		return mapper.selectAssignmentDetail(assNo);
	}

	// 과제 제출 - 파일
	@Override
	public int insertAssignmentSubmit(AssignmentSubmitVO assignmentSubmitVO) {
		List<FileVO> fileList = assignmentSubmitVO.getAssFileList();
		try {
			fileUpload(fileList, assignmentSubmitVO);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		//int result = mapper.insertAssignmentSubmit(assignmentSubmitVO);
		
		
		return  mapper.insertAssignmentSubmit(assignmentSubmitVO);
	}

	// 파일 업로드 매서드 
	private void fileUpload(List<FileVO> fileList, AssignmentSubmitVO assignmentSubmitVO) throws Exception {
		if (fileList != null) {
			String fileGroupNo = fileMapper.getFileGroupNo();
			String assSubNo = "";
			if(assignmentSubmitVO.getAssSubNo() != null) { // update 할때  번호가 바뀌는 문제가 있음.
				assSubNo = assignmentSubmitVO.getAssSubNo();
			}else {
				assSubNo = mapper.getAssSubNo();
			}
			assignmentSubmitVO.setAssSubNo(assSubNo);
			assignmentSubmitVO.setFileGroupNo(fileGroupNo);
			

			String saveLocate = uploadPath + "/assignment/" +  assSubNo;
			File file = new File(saveLocate);
			if (!file.exists()) {
				file.mkdirs();
			}
			
			if (fileList.size() >0) {
				for (int i = 0 ; i<fileList.size(); i++) {
					String saveLocate2 = saveLocate;
					FileVO fileVO = fileList.get(i);
					String saveName = UUID.randomUUID().toString(); // UUID 랜덤 파일명 생성
					saveName = saveName+"_"+fileVO.getFileName().replaceAll(" ", "_");
					
					// 파일 복사 최종경로 
					saveLocate2 += "/"+ saveName;
					fileVO.setFileGroupNo(fileGroupNo);
					fileVO.setFileNo(i+1);
					fileVO.setFileSaveName(saveName);
					fileVO.setFileSavepath(saveLocate2);
					fileMapper.insertLecFile(fileVO);
					
					// 파일 복사를 하기 위한 target
					File saveFile = new File(saveLocate2);
					fileVO.getItem().transferTo(saveFile);
					
				}
			}
		}
		
	}

}
