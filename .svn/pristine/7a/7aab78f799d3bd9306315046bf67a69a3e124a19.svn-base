package kr.or.ddit.controller.admin;

import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.service.admin.inter.IAdminCommonService;
import kr.or.ddit.service.admin.inter.IAdminDepartmentService;
import kr.or.ddit.service.admin.inter.IAdminMemberService;
import kr.or.ddit.vo.CommonVO;
import kr.or.ddit.vo.DepartmentVO;
import kr.or.ddit.vo.PaginationInfoVO;
import kr.or.ddit.vo.ProfessorVO;
import kr.or.ddit.vo.StudentVO;
import lombok.extern.slf4j.Slf4j;

@Controller
@Slf4j
@RequestMapping("/admin")
public class AdminMemberController {

	@Inject
	private IAdminMemberService memService;
	
	@Inject
	private IAdminDepartmentService deptService;
	
	@Inject
	private IAdminCommonService commonService;
	
	@RequestMapping(value = "/searchProfessor.do", method = RequestMethod.POST)
	public ResponseEntity<List<ProfessorVO>> searchProfessor(@RequestBody Map<String, String> map) {
		log.info("searchProfessor()...!");
		log.info("proName >> " + map.get("proName"));
		
		List<ProfessorVO> proList = memService.searchProfessor(map.get("proName"));
		for(ProfessorVO p : proList) log.info("proList >> " + p.toString());
		
		return new ResponseEntity<List<ProfessorVO>>(proList, HttpStatus.OK);
	}
	
//	// 학생 정보 가져오기
//	@RequestMapping(value="/memberMain", method = RequestMethod.GET)
//	public String memberMain(Model model) {
//		
//		List<StudentVO> stuList =  memService.selectStuList();
//		
//		model.addAttribute("stuList", stuList);
//		return "admin/member/memberList";
//	}
	
	// 학생 정보 상세보기
	@RequestMapping(value="/stuDetail", method = RequestMethod.GET)	
	public String stuDetail(String stuNo, Model model) {
		log.info("stuNo");
		model.addAttribute("stuNo", stuNo);
		
		// 학생 정보
		StudentVO stuVO = memService.stuDetail(stuNo);
		model.addAttribute("stuVO", stuVO);
		
		// 학과 이름 리스트
		List<DepartmentVO> deptList = deptService.getDeptNameList();
		model.addAttribute("deptList", deptList);
				
		log.info("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" + stuVO.getComDetMNo());
		
		// 재적 상태 리스트
		List<CommonVO> codeName = memService.stuMList("M01");		
		model.addAttribute("stuMCode", codeName);
		
		// 은행 선택 리스트
		List<CommonVO> bankList = commonService.getComDetailList("B01");
		model.addAttribute("bankList", bankList);
		
		return "admin/member/stuDetail";
	}
	
	// 학생 정보 업데이트
	@RequestMapping(value="/stuUpdate", method = RequestMethod.POST)
	public String update(StudentVO stuVO, Model model, RedirectAttributes ra, HttpServletRequest req) {
		String goPage = "";		
		log.info("@@@@@@@ stuVO @@@@@" + stuVO);
		
		int cnt = memService.stuUpdate(stuVO, req);
		
		if(cnt > 0 ) { // 업데이트 성공
			ra.addFlashAttribute("msg", "수정에 성공했습니다.");
			goPage = "redirect:/admin/stuDetail?stuNo="+stuVO.getStuNo();
		}else {
			goPage= "redirect:/admin/stuDetail?stuNo=" + stuVO.getStuNo();
		}
		
		
		return goPage;
	}
	
	// 학생리스트
	@RequestMapping(value = "memberMain", method = RequestMethod.GET)
	public String stuList(@RequestParam(name="page", required = false, defaultValue = "1") int currentPage,
			@RequestParam(required = false, defaultValue = "99") String searchType,
			@RequestParam(required = false) String searchWord, Model model
			){
		
		PaginationInfoVO<StudentVO> pagingVO = new PaginationInfoVO<StudentVO>();
		
		pagingVO.setCurrentPage(currentPage);
		pagingVO.setSearchType(searchType);
		pagingVO.setSearchWord(searchWord);
		
		int totalRecord = memService.stuCount(pagingVO);
		
		pagingVO.setTotalRecord(totalRecord);
		List<StudentVO> dataList = memService.stuList(pagingVO);
		
		pagingVO.setDataList(dataList);
		
		model.addAttribute("searchType", searchType);
		model.addAttribute("pagingVO", pagingVO);
		
		
		return "admin/member/stuList";
	}
	
	// 교수 리스트
	@RequestMapping(value = "/proList", method = RequestMethod.GET)
	public String proList(@RequestParam(name="page", required = false, defaultValue = "1") int currentPage,
			@RequestParam(required = false) String searchType,
			@RequestParam(required = false) String searchWord, Model model
			){
		
		PaginationInfoVO<ProfessorVO> pagingVO = new PaginationInfoVO<ProfessorVO>();
		
		pagingVO.setCurrentPage(currentPage);
		pagingVO.setSearchType(searchType);
		pagingVO.setSearchWord(searchWord);
		
		int totalRecord = memService.proCount(pagingVO);
		
		pagingVO.setTotalRecord(totalRecord);
		List<ProfessorVO> dataList = memService.proList(pagingVO);
		
		pagingVO.setDataList(dataList);
		
		model.addAttribute("searchType", searchType);
		model.addAttribute("pagingVO", pagingVO);
		
		
		return "admin/member/proList";
	}
	
	// 학생 정보 상세보기
	@RequestMapping(value="/proDetail", method = RequestMethod.GET)	
	public String proDetail(String proNo, Model model) {
		log.info("proNo");
		model.addAttribute("proNo", proNo);
		
		// 교수 정보
		ProfessorVO proVO = memService.proDetail(proNo);
		model.addAttribute("proVO", proVO);
		
		// 학과 이름 리스트
		List<DepartmentVO> deptList = deptService.getDeptNameList();
		model.addAttribute("deptList", deptList);
				
		log.info("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" + proVO.getComDetMNo());
		
		// 재적 상태 리스트
		List<CommonVO> codeName = memService.stuMList("M02");		
		model.addAttribute("proMCode", codeName);
		
		// 은행 선택 리스트
		List<CommonVO> bankList = commonService.getComDetailList("B01");
		model.addAttribute("bankList", bankList);
		
		return "admin/member/proDetail";
	}
	
	// 교수 정보 업데이트
	@RequestMapping(value="/proUpdate", method = RequestMethod.POST)
	public String update(ProfessorVO proVO, Model model, RedirectAttributes ra, HttpServletRequest req) {
		String goPage = "";		
		log.info("@@@@@@@ stuVO @@@@@" + proVO);
		
		int cnt = memService.proUpdate(proVO, req);
		
		if(cnt > 0 ) { // 업데이트 성공
			ra.addFlashAttribute("msg", "수정에 성공했습니다.");
			goPage = "redirect:/admin/proDetail?proNo="+ proVO.getProNo();
		}else {
			goPage= "redirect:/admin/proDetail?proNo=" + proVO.getProNo();
		}
		
		
		return goPage;
	}
	
	@RequestMapping(value="/idCheck", method=RequestMethod.POST)
	public ResponseEntity<String> idcheck(String proID){
		String msg = "";
		ResponseEntity<String> entity = null;
		
		log.info("@@@@@@@@@@@@@@@@@@@@proID======>> " + proID);
		
		int count = memService.proIdCheck(proID);
		
		if(count > 0) {
			msg = "아이디가 이미 사용 중입니다.";
			entity = new ResponseEntity<String>(msg, HttpStatus.OK);
		} else {
			msg = "사용이 가능한 아이디입니다.";
			entity = new ResponseEntity<String>(msg, HttpStatus.NOT_EXTENDED);
		}
		
		return entity;
	}
}


























