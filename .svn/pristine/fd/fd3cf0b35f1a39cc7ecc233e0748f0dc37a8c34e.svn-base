package kr.or.ddit.controller.student;

import java.security.Principal;
import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import kr.or.ddit.service.student.inter.IStuLicenseService;
import kr.or.ddit.vo.LicenseVO;
import lombok.extern.slf4j.Slf4j;

// 학생 - 자격증
@Controller
@Slf4j
@RequestMapping("/student")
public class StuLicenseController {

	@Inject
	private IStuLicenseService service;

	// 자격증 신청
	@RequestMapping(value = "/insertLicense", method = RequestMethod.POST)
	public String insertLicense(@ModelAttribute LicenseVO licenseVO, BindingResult result, Model model,
			Principal principal) {

		// 로그인한 사용자의 학번 설정
		String stuNo = principal.getName();
		licenseVO.setStuNo(stuNo);

		if (result.hasErrors()) {
			return "sum/student/license/insertLicense";
		}

		service.insertLicense(licenseVO);

		return "redirect:/student/myLicenseList";
	}

	// 내가 신청한 자격증 목록 조회
	@RequestMapping(value = "/myLicenseList", method = RequestMethod.GET)
	public String myLicenseList(
	        @RequestParam(required = false, defaultValue = "전체") String type,
	        @RequestParam(required = false) String searchName,
	        Model model, Principal principal) {
	    log.info("신청한 자격증 내역 조회...!");

	    String stuNo = principal.getName();
	    log.info("로그인한 userId : " + stuNo);

	    List<LicenseVO> licenseList = service.myLicenseList(stuNo);

	    // 필터링 로직 추가
	    if (type != null && !type.equals("전체")) {
	        licenseList = licenseList.stream().filter(s -> {
	            switch (type) {
	                case "승인":
	                    return "C0201".equals(s.getComdetCNo());
	                case "미승인":
	                    return "C0202".equals(s.getComdetCNo());
	                case "반려":
	                    return "C0203".equals(s.getComdetCNo());
	                default:
	                    return true;
	            }
	        }).collect(Collectors.toList());
	    }
	    if (searchName != null && !searchName.isEmpty()) {
	        licenseList = licenseList.stream()
	                .filter(s -> s.getLicName().toLowerCase().contains(searchName.toLowerCase()))
	                .collect(Collectors.toList());
	    }

	    model.addAttribute("licenseList", licenseList);
	    model.addAttribute("selectedType", type);
	    model.addAttribute("searchName", searchName);

	    return "sum/student/license/myLicenseList";
	}


	// 자격증 등록 폼 실행
	@RequestMapping(value="/licenseForm", method = RequestMethod.GET)
	public String insertLicenseForm(Model model) {
		return "sum/student/license/licenseForm";
	}
	
	
	

}
