package kr.or.ddit.controller.exam;

import java.util.List;

import javax.inject.Inject;

import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.service.exam.IExamService;
import kr.or.ddit.service.professor.inter.IProLectureService;
import kr.or.ddit.vo.CustomUser;
import kr.or.ddit.vo.ExamVO;
import kr.or.ddit.vo.LectureVO;
import kr.or.ddit.vo.PaginationInfoVO;
import kr.or.ddit.vo.StudentVO;
import kr.or.ddit.vo.UserVO;
import lombok.extern.slf4j.Slf4j;

@Controller
@Slf4j
@RequestMapping("/exam")
public class ExamController {

	@Inject
	private IProLectureService lectureService;
	
	@Inject
	private IExamService examService;
	
	
	
	@RequestMapping(value = "/examList", method = RequestMethod.GET)
	public String examList(
			@RequestParam(required = false, defaultValue = "") String searchType, 
			String lecNo, Model model) {
		log.info("examList()...!");
		
		CustomUser user = (CustomUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		UserVO userVO = user.getUser();
		String auth = userVO.getComDetUNo();
		String goPage = "";
		
		PaginationInfoVO<ExamVO> pagingVO = new PaginationInfoVO<ExamVO>();
		pagingVO.setSearchType(searchType);
		pagingVO.setLecNo(lecNo);
		
		List<ExamVO> examList = examService.getExamListByLecNo(pagingVO);
		model.addAttribute("examList", examList);
		model.addAttribute("lecNo", lecNo);
		model.addAttribute("searchType", searchType);
//		model.addAttribute("auth", auth);
		
		if(auth.equals("U0101")) {
			goPage = "sum/professor/exam/examList";
		} else if(auth.equals("U0102")) {
			goPage = "sum/professor/exam/examList";
		} else {
			
		}
		
		return goPage;
	}
	
	@RequestMapping(value = "/examInsertForm", method = RequestMethod.GET)
	public String examInsertForm(String lecNo, Model model) {
		log.info("examInsertForm()...!");
		
		LectureVO lectureVO = lectureService.selectLecture(lecNo);
		model.addAttribute("lecVO", lectureVO);
		
		return "professor/exam/examInsertForm";
	}
	
	@RequestMapping(value = "/examInsert", method = RequestMethod.POST)
	public String examInsert(ExamVO examVO) {
		log.info("examInsert()...!");
		
		examVO.setExamDate(examVO.getExamDate()+" "+examVO.getExamTime().replace("_", ":"));
		examService.insertExam(examVO);
		
		return "redirect:/exam/examList?lecNo="+examVO.getLecNo();
	}
	
	@RequestMapping(value = "/examDetail", method = RequestMethod.GET)
	public String examDetail(String examNo, Model model) {
		log.info("examDetail()...!");
		
		ExamVO examVO = examService.getExamDetail(examNo);
		List<StudentVO> studentList = examService.getStudentExamList(examNo);
		List<String> studentSubmitList = examService.getStudentExamSubmitList(examNo);
		model.addAttribute("examVO", examVO);
		model.addAttribute("studentList", studentList);
		model.addAttribute("studentSubmitList", studentSubmitList);
		
		return "professor/exam/examDetail";
	}
	
	@RequestMapping(value = "/examDelete", method = RequestMethod.POST)
	public String examDelete(String examNo, RedirectAttributes ra) {
		log.info("examDelete()...!");
		
		int cnt = examService.deleteExam(examNo);
		if(cnt == 1) {
			ra.addFlashAttribute("msg", "삭제되었습니다");
		} else {
			ra.addFlashAttribute("msg", "오류 발생");
		}
		
		return "redirect:/exam/examList?lecNo=";
	}
	
	@RequestMapping(value = "/updateForm", method = RequestMethod.POST)
	public String examUpdate(String examNo, String lecNo, Model model) {
		log.info("examUpdate()...!");
		
		ExamVO examVO = examService.getExamDetail(examNo);
		LectureVO lectureVO = lectureService.selectLecture(lecNo);
		model.addAttribute("examVO", examVO);
		model.addAttribute("lecVO", lectureVO);
		
		return "sum/professor/exam/examInsertForm";
	}
	
	
	
	
}




























